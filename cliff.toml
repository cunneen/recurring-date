# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """\
{% set orig_version = version %}\
{% if version %}\
    ## {{ version | trim_start_matches(pat="v") }} - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## Unreleased
{% endif %}{% raw %}\n{% endraw %}\
{% if previous %}\
    {% if previous.version and version %}\
        [{{ previous.version }}...{{ orig_version }}](../../compare/{{ previous.version }}...{{ orig_version }})
    {% endif %}\
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}

    {% for commit in commits
    | filter(attribute="scope") %}\
        {% set sha = commit.id | truncate(length=7, end="") %}\
        {% set sanitized_message = commit.message | replace(from="\n\n", to="\n") | upper_first | trim | indent(prefix="  - ", first=false) %}\
        - *({{commit.scope}})* {{ sanitized_message }} [<sup>({{ sha }})</sup>][{{ sha }}]
        {%- if commit.breaking %}\
        {% raw %}  {% endraw %}- **BREAKING**: {{commit.breaking_description | indent(prefix="  - ", first=false)}}
        {%- endif -%}{% raw %}\n{% endraw %}\
    {%- endfor -%}\
    {%- for commit in commits %}\
        {% set sha = commit.id | truncate(length=7, end="") %}\
        {% set sanitized_message = commit.message | replace(from="\n\n", to="\n") | upper_first | trim | indent(prefix="  - ", first=false) %}\
        {%- if commit.scope -%}\
        {% else -%}\
            - {{ sanitized_message }} [<sup>({{ sha }})</sup>][{{ sha }}]
            {% if commit.breaking -%}\
            {% raw %}  {% endraw %}- **BREAKING**: {{commit.breaking_description  | indent(prefix="  - ", first=false)}}
            {% endif -%}\
        {% endif -%}\
    {% endfor -%}\
{% endfor %}
<!-- LINKS -->
{% for commit in commits %}\
    [{{ commit.id | truncate(length=7, end="") }}]:../../commit/{{ commit.id }}
{% endfor %}{% raw %}\n{% endraw %}
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true


[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^(feat|Revert \"feat)", group = "<!-- 0 -->:rocket: New features" },
    { message = "^(fix|Revert \"fix)", group = "<!-- 1 -->:bug: Bug fixes" },
    { message = "^(doc|Revert \"doc)", group = "<!-- 2 -->:memo: Documentation" },
    { message = "^(perf|Revert \"perf)", group = "<!-- 3 -->:zap: Performance" },
    { message = "^(refactor|Revert \"refactor)", group = "<!-- 4 -->:recycle: Refactor" },
    { message = "^(style|Revert \"style)", group = "<!-- 5 -->:lipstick: Styling" },
    { message = "^(test|Revert \"test)", group = "<!-- 6 -->:test_tube: Testing" },
    { message = "^(chore|Revert \"chore)\\(release\\): prepare for", skip = true },
    { message = "^(chore|Revert \"chore)|^(ci|Revert \"ci)", group = "<!-- 7 -->:gear: Miscellaneous Tasks" },
    { body = ".*security", group = "<!-- 8 -->:lock: Security" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"